 @model Exam2025.API.Models.TakeExamModel

@{
    ViewData["Title"] = "StartExam";
}



<div class="container my-5">
    <div class="card shadow-lg">
        <div class="card-body">
            <h2 class="card-title text-center mb-4">@Model.Name</h2>
            <p class="text-muted text-center">@Model.Body</p>
            <div class="d-flex justify-content-center mb-4">
                <span class="badge bg-primary mx-2">Number of Questions: @Model.NumberofQuestions</span>
                <span class="badge bg-success mx-2">Success Rate: @Model.SuccessRate%</span>
                <span class="badge bg-warning text-dark mx-2">Duration in minutes: @Model.DurationInnMinutes</span>
                <span id="countdown" class="badge bg-danger mx-2">Danger Time: 00:00</span>
                 <input type="hidden" id="hdnDuration" value="@Model.DurationInnMinutes" />


            </div>

            <form id="examForm" asp-controller="Exams" asp-action="SubmitExam" method="post">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                <input type="hidden" name="ExamTBLId" value="@Model.ExamTBLId" />

                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    var question = Model.Questions[i];
                    <div class="card mb-4 border-0">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Question @(i + 1): @question.Title</h5>
                            <input type="hidden" name="Questions[@i].QuestionTBLId" value="@question.QuestionTBLId" />
                        </div>
                        <div class="card-body">
                            @foreach (var answer in question.Answers)
                            {
                                <div class="form-check mb-2">
                                    <input class="form-check-input"
                                           type="radio"
                                           name="Questions[@i].SelectedAnswerId"
                                           value="@answer.AnswerTBLId"
                                           id="q_@(question.QuestionTBLId)_a_@(answer.AnswerTBLId)" />
                                    <label class="form-check-label" for="q_@(question.QuestionTBLId)_a_@(answer.AnswerTBLId)">
                                        @answer.Name
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="text-center">
                    <button type="submit" class="btn btn-success btn-lg px-5">Submit Answers</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .border-danger {
        border: 2px solid #dc3545 !important;
        border-radius: 5px;
    }

    .answer-error {
        animation: fadeIn 0.3s;
    }

    #countdown.warning {
        animation: pulse 1s infinite;
    }

    @@keyframes pulse {
        0% {
            background-color: #dc3545;
        }

        50% {
            background-color: #ff6b6b;
        }

        100% {
            background-color: #dc3545;
        }
    }
</style>
<script>
     // Timer functionality
    function startTimer(duration, display) {
        let timer = duration, minutes, seconds;
        const interval = setInterval(function () {
            minutes = parseInt(timer / 60, 10);
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = "Remaning Time: " + minutes + ":" + seconds;

            // Add warning class when less than 1 minute remains
            if (timer <= 60) {
                display.classList.add('warning');
            }

            if (--timer < 0) {
                clearInterval(interval);
                // Time's up - auto submit
                document.getElementById('examForm').submit();
            }
        }, 1000);
    }

    window.onload = function () {
        const durationMinutes = parseInt(document.getElementById('hdnDuration').value);
        // Set timer for 5 minutes (300 seconds)
        const fiveMinutes = 60 * durationMinutes,
            display = document.querySelector('#countdown');
        startTimer(fiveMinutes, display);
    };




        document.querySelector('form').addEventListener('submit', function(e) {
        // Prevent default submission
        e.preventDefault();

        // Reset previous error states
        const allCards = document.querySelectorAll('.card');
        allCards.forEach(card => {
            card.classList.remove('border-danger');
            const errorMsg = card.querySelector('.answer-error');
            if (errorMsg) errorMsg.remove();
        });

        // Validate each question
        let isValid = true;
        // const questionGroups = document.querySelectorAll('[name^="Questions["]');
        // const questionNames = new Set(Array.from(questionGroups).map(input => input.name));
           const radioButtons = document.querySelectorAll('input[type="radio"][name*="SelectedAnswerId"]');
           const questionNames = new Set(Array.from(radioButtons).map(rb => rb.name));



        Array.from(questionNames).forEach(name => {
            const questionIndex = name.match(/\[(\d+)\]/)[1];
            const card = document.querySelector(`[name="${name}"]`).closest('.card');

            // Check if at least one radio is checked in this group
            if (!document.querySelector(`[name="${name}"]:checked`)) {
                isValid = false;

                // Add visual error indicators
                card.classList.add('border-danger');

                // Create error message element if not exists
                if (!card.querySelector('.answer-error')) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger mt-2 answer-error';
                    errorDiv.textContent = 'Please Select an Answer';
                    card.querySelector('.card-body').appendChild(errorDiv);
                }
            }
        });

        // Scroll to first error if any
        if (!isValid) {
            const firstError = document.querySelector('.border-danger');
            if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }

            // Show general error message
            const generalError = document.createElement('div');
            generalError.className = 'alert alert-danger text-center mb-3';
            generalError.textContent = 'Please Answer All questions before submitting';
            const existingGeneralError = document.querySelector('.general-form-error');
            if (existingGeneralError) existingGeneralError.remove();
            generalError.classList.add('general-form-error');
            document.querySelector('form').prepend(generalError);
        } else {
            // If valid, submit the form
            this.submit();
        }
    });
</script>